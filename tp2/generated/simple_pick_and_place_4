q = q_touch.copy()
vq = np.array([2., 0, 0, 4., 0, 0])
idx = 6

oMend = robot.placement(q, idx)
o_end = oMend.translation  # Position of end-eff express in world frame
o_ball = q_ball[:3]  # Position of ball express in world frame
o_end_ball = o_ball - o_end  # Relative position of ball center wrt end effector position, express in world frame
end_ball = oMend.rotation.T @ o_end_ball  # Position of ball wrt eff in local coordinate

for i in range(200):
    # Chose new configuration of the robot
    q += vq / 40
    q[2] = 1.71 + math.sin(i * 0.05) / 2

    # Gets the new position of the ball
    oMend = robot.placement(q, idx)
    o_ball = oMend * end_ball  # Apply oMend to the relative placement of ball

    # Display new configuration for robot and ball
    viz.applyConfiguration(ballID, o_ball.tolist() + [1, 0, 0, 0])
    viz.display(q)
    time.sleep(1e-2)
